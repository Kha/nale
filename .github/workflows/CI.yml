name: "CI"
on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - master

permissions:
  # deployments permission to deploy GitHub pages website
  deployments: write
  # contents permission to update benchmark contents in gh-pages branch
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Nale
      run: |
        curl -sSfL https://github.com/Kha/nale/releases/latest/download/nix-portable -o nix
        chmod u+x nix
        #echo ' ' > ~/.config/nix.conf
        echo $PWD >> $GITHUB_PATH
    - name: Setup Nix Cache
      uses: actions/cache@v3
      with:
        path: nix-store-cache
        key: nix-store-cache-${{ github.ref_name }}-${{ github.sha }}
        # fall back to (latest) previous cache
        restore-keys: |
          nix-store-cache-${{ github.ref_name }}
          nix-store-cache
    - run: |
        cp -r nix-store-cache nix-store-cache-copy || true
    - name: Build
      id: build
      run: |
        args="-L --option extra-substituters file://${{ github.workspace }}/nix-store-cache-copy?priority=10&trusted=true"
        nix shell . $args -c sh -c 'cp $(which nix-portable) .'
        nix build ./lake2nix -o result-lake2nix $args
      shell: nix run .#ciShell -- bash -euxo pipefail {0}
    - name: Rebuild Nix Store Cache
      run: |
        rm -rf nix-store-cache || true
        nix copy . --to file://$PWD/nix-store-cache?compression=none
    - name: Push to Cachix
      env:
        CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
      run: |
        [ -z "${{ secrets.CACHIX_AUTH_TOKEN }}" ] || nix run nixpkgs#cachix push -j4 lean4 ./result-lake2nix
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: nale-bin
        path: nix-portable
        if-no-files-found: error

  bench:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: nale-bin
      - name: Setup
        run: |
          chmod u+x nale-bin/nale-bin/nix-portable
          echo $PWD/nale-bin/nale-bin >> $GITHUB_PATH
      - name: Bench
        shell: nix-portable nix run .#ciShell -- bash -euxo pipefail {0}
        run: ./script/bench
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: customSmallerIsBetter
          output-file-path: times.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }}

  bench-reference:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: nale-bin
      - name: Setup
        run: |
          chmod u+x nale-bin/nale-bin/nix-portable
          echo $PWD/nale-bin/nale-bin >> $GITHUB_PATH
      - name: Bench
        shell: nix-portable nix run .#ciShell -- bash -euxo pipefail {0}
        run: ./script/bench-reference
      - name: Store reference result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Lake Reference
          tool: customSmallerIsBetter
          output-file-path: times.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: nale-bin
      - name: Chore
        run: |
          chmod u+x nale-bin/nale-bin/nix-portable
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: nale-bin/nale-bin/nix-portable
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
